# Set working directory
setwd("./")
source('signRankSampler.R')
source('rankSumSampler.R')
library(effsize)
library(BayesFactor)
library(sn)
library(parallel)
library(logspline)
library(foreach)
library(doMC)
no_cores <- detectCores() - 1
nIter <- 3e2
nBurnin <- 1e2
nReps <- nRuns <- 20
system_C <- read.csv("C_Scores.csv")
system_AT <- read.csv("AT_Scores.csv")
View(system_AT)
X <- as.matrix(system_C$Remuneration)
View(X)
View(X)
Y <- as.matrix(system_AT$Remuneration)
View(Y)
allScenarios <- c(
"False",
"Left",
"Right"
)
myColnames <- c("obsMeanX", "obsMeanY", "obsMedianY", "obsMedianY", "obsMedianDiff",
"obsVarX", "obsVarY", "myBF", "moreyBF", "W", "pval_W", "pval_T",
"cohenD", paste0(100 * c(0.025, 0.25, 0.5, 0.75, 0.975), "% Q"))
nColsResults <- length(myColnames)
registerDoMC()
analyzeSamples <- function(nIter, nBurnin, myCase, progBar = TRUE) {
switch(myCase,
"False" = {
x <- Y$value
y <- X$value
paired <- FALSE
oneSided <- FALSE
},
"Left" = {
x <- Y$V1
y <- X$V1
paired <- TRUE
oneSided <- "left"
},
"Right" = {
x <- Y$value
y <- X$value
paired <- TRUE
oneSided <- "right"
})
thisRow <- try(expr = {
if (paired) {
mySamples <- signRankGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
} else {
mySamples <- rankSumGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
}
rsQuants <- quantile(mySamples, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
bf10 <- computeBayesFactorOneZero(mySamples, priorParameter = 1 / sqrt(2), oneSided = oneSided)
moreyBf <- 1 / exp(ttestBF(x, y, rscale = 1 / sqrt(2), paired = paired)@bayesFactor$bf)
freqRes <- wilcox.test(x, y, paired = paired)
testStat <- unname(freqRes$statistic)
pVal <- unname(freqRes$p.value)
pValT <- t.test(x, y, paired = paired)$p.value
cohenD <- cohen.d(x, y, paired = paired)$estimate
obsMeanX <- mean(x)
obsMeanY <- mean(y)
obsMedianX <- median(x)
obsMedianY <- median(y)
obsMedianDiff <- median(x - y)
obsVarX <- var(x)
obsVarY <- var(y)
return(unname(c(obsMeanX, obsMeanY, obsMedianX, obsMedianY, obsMedianDiff, obsVarX,
obsVarY, bf10, moreyBf, testStat, pVal, pValT, cohenD, rsQuants)))
}, silent = FALSE)
if (!is.numeric(thisRow)) {
thisRow <- rep(0, (nColsResults - 2))
}
return(thisRow)
}
thisScenario <- "Left"
myFilename <- paste0(thisScenario, ".Rdata")
results <- matrix(ncol = nColsResults, nrow = 0, dimnames = list(NULL, myColnames))
print(thisScenario)
myResult <- foreach(k = 1:nRuns, .combine = 'rbind') %dopar% {
analyzeSamples(myCase = thisScenario, nIter = nIter, nBurnin = nBurnin)
}
myColnames <- c("obsMeanX", "obsMeanY", "obsMedianY", "obsMedianY", "obsMedianDiff",
"obsVarX", "obsVarY", "myBF", "moreyBF", "W", "pval_W", "pval_T",
"cohenD", paste0(100 * c(0.025, 0.25, 0.5, 0.75, 0.975), "% Q"))
nColsResults <- length(myColnames)
registerDoMC()
analyzeSamples <- function(nIter, nBurnin, myCase, progBar = TRUE) {
switch(myCase,
"False" = {
x <- Y$value
y <- X$value
paired <- FALSE
oneSided <- FALSE
},
"Left" = {
x <- Y
y <- X
paired <- TRUE
oneSided <- "left"
},
"Right" = {
x <- Y$value
y <- X$value
paired <- TRUE
oneSided <- "right"
})
thisRow <- try(expr = {
if (paired) {
mySamples <- signRankGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
} else {
mySamples <- rankSumGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
}
rsQuants <- quantile(mySamples, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
bf10 <- computeBayesFactorOneZero(mySamples, priorParameter = 1 / sqrt(2), oneSided = oneSided)
moreyBf <- 1 / exp(ttestBF(x, y, rscale = 1 / sqrt(2), paired = paired)@bayesFactor$bf)
freqRes <- wilcox.test(x, y, paired = paired)
testStat <- unname(freqRes$statistic)
pVal <- unname(freqRes$p.value)
pValT <- t.test(x, y, paired = paired)$p.value
cohenD <- cohen.d(x, y, paired = paired)$estimate
obsMeanX <- mean(x)
obsMeanY <- mean(y)
obsMedianX <- median(x)
obsMedianY <- median(y)
obsMedianDiff <- median(x - y)
obsVarX <- var(x)
obsVarY <- var(y)
return(unname(c(obsMeanX, obsMeanY, obsMedianX, obsMedianY, obsMedianDiff, obsVarX,
obsVarY, bf10, moreyBf, testStat, pVal, pValT, cohenD, rsQuants)))
}, silent = FALSE)
if (!is.numeric(thisRow)) {
thisRow <- rep(0, (nColsResults - 2))
}
return(thisRow)
}
thisScenario <- "Left"
myFilename <- paste0(thisScenario, ".Rdata")
results <- matrix(ncol = nColsResults, nrow = 0, dimnames = list(NULL, myColnames))
print(thisScenario)
myResult <- foreach(k = 1:nRuns, .combine = 'rbind') %dopar% {
analyzeSamples(myCase = thisScenario, nIter = nIter, nBurnin = nBurnin)
}
results <- rbind(results, myResult)
rownames(results) <- NULL
# save(results, file = myFilename)
print(mean(results[, "myBF"]))
# Set working directory
setwd("./")
source('signRankSampler.R')
source('rankSumSampler.R')
# install.packages(c("effsize", "BayesFactor", "sn", "parallel", "logspline", "foreach", "doMC"))
library(effsize)
library(BayesFactor)
library(sn)
library(parallel)
library(logspline)
library(foreach)
library(doMC)
no_cores <- detectCores() - 1
nIter <- 3e2
nBurnin <- 1e2
nReps <- nRuns <- 20
system_C <- read.csv("C_Scores.csv")
system_AT <- read.csv("AT_Scores.csv")
X <- as.matrix(system_C$Ethics)
Y <- as.matrix(system_AT$Ethics)
X <- system_C$Ethics
Y <- system_AT$Ethics
allScenarios <- c(
"False",
"Left",
"Right"
)
myColnames <- c("obsMeanX", "obsMeanY", "obsMedianY", "obsMedianY", "obsMedianDiff",
"obsVarX", "obsVarY", "myBF", "moreyBF", "W", "pval_W", "pval_T",
"cohenD", paste0(100 * c(0.025, 0.25, 0.5, 0.75, 0.975), "% Q"))
nColsResults <- length(myColnames)
registerDoMC()
analyzeSamples <- function(nIter, nBurnin, myCase, progBar = TRUE) {
switch(myCase,
"False" = {
x <- Y
y <- X
paired <- TRUE
oneSided <- FALSE
},
"Left" = {
x <- Y
y <- X
paired <- TRUE
oneSided <- "left"
},
"Right" = {
x <- Y
y <- X
paired <- TRUE
oneSided <- "right"
})
thisRow <- try(expr = {
if (paired) {
mySamples <- signRankGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
} else {
mySamples <- rankSumGibbsSampler(x, y, nSamples = nIter + nBurnin, progBar = progBar)$deltaSamples[nBurnin:(nIter + nBurnin)]
}
rsQuants <- quantile(mySamples, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
bf10 <- computeBayesFactorOneZero(mySamples, priorParameter = 1 / sqrt(2), oneSided = oneSided)
moreyBf <- 1 / exp(ttestBF(x, y, rscale = 1 / sqrt(2), paired = paired)@bayesFactor$bf)
freqRes <- wilcox.test(x, y, paired = paired)
testStat <- unname(freqRes$statistic)
pVal <- unname(freqRes$p.value)
pValT <- t.test(x, y, paired = paired)$p.value
cohenD <- cohen.d(x, y, paired = paired)$estimate
obsMeanX <- mean(x)
obsMeanY <- mean(y)
obsMedianX <- median(x)
obsMedianY <- median(y)
obsMedianDiff <- median(x - y)
obsVarX <- var(x)
obsVarY <- var(y)
return(unname(c(obsMeanX, obsMeanY, obsMedianX, obsMedianY, obsMedianDiff, obsVarX,
obsVarY, bf10, moreyBf, testStat, pVal, pValT, cohenD, rsQuants)))
}, silent = FALSE)
if (!is.numeric(thisRow)) {
thisRow <- rep(0, (nColsResults - 2))
}
return(thisRow)
}
thisScenario <- "Left"
myFilename <- paste0(thisScenario, ".Rdata")
results <- matrix(ncol = nColsResults, nrow = 0, dimnames = list(NULL, myColnames))
print(thisScenario)
myResult <- foreach(k = 1:nRuns, .combine = 'rbind') %dopar% {
analyzeSamples(myCase = thisScenario, nIter = nIter, nBurnin = nBurnin)
}
results <- rbind(results, myResult)
rownames(results) <- NULL
# save(results, file = myFilename)
print(mean(results[, "myBF"]))
